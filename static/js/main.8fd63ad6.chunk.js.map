{"version":3,"sources":["ListAdd/ListAdd.js","Todo/Todo.js","Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["ListAdd","props","className","onSubmit","addList","type","placeholder","onChange","searchChange","value","Todo","itemLists","update","deleteItem","map","l","id","key","e","target","onClick","Nav","reset","listnew","App","resetList","setState","list","deleteitem","filtereItems","state","filter","it","updateList","items","adList","preventDefault","newItem","currentitem","onSearchChange","event","Date","now","console","log","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8fd63ad6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst ListAdd=(props)=>{\r\n  return(\r\n    <div className=\" flex justify-center mt-10\">\r\n      <form onSubmit={props.addList}> <input className=\"transition ease-in duration-9000 p-4 rounded shadow outline-none\" type=\"text\" placeholder=\"Enter List Item\" onChange={props.searchChange}\r\n      value={props.value}\r\n        />\r\n       <button className=\"transition ease-in duration-500 bg-yellow-200 hover:bg-yellow-700 text-blue-700 font-semibold hover:text-white py-2 px-6 ml-4 border border-blue-500 hover:border-transparent rounded transform\"\r\n       >\r\n  Add\r\n</button>\r\n</form>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n export default ListAdd;","import React from \"react\";\r\n\r\n\r\nconst Todo=({itemLists,update,deleteItem})=>{\r\n  const Listitems = itemLists.map(l=>\r\n    {\r\n      return <div className=\"flex relative bg-red-500 mr-20 ml-20 justify-center mt-2\">\r\n      <div className=\"flex-auto  bg-red-500 max-w-full rounded overflow-hidden mt-2 mb-2\">\r\n        <input className=\"ml-4 text-center text-2xl  w-240 bg-red-500  font-semibold outline-none focus:bg-red-500\"type=\"text\" id={l.key} value={l.value} onChange={\r\n        (e)=>{\r\n          update(e.target.value,l.key)\r\n        }\r\n      }\r\n        />\r\n      <p className=\"absolute cursor-pointer right-0 top-0 p-3 text-yellow-400\" onClick={()=>{\r\n            return deleteItem(l.key)\r\n          }}>delete</p>\r\n      </div>\r\n    </div>\r\n    })\r\n  return(\r\n     Listitems\r\n  )\r\n}\r\n export default Todo;","import React from \"react\";\r\n\r\n\r\nconst Nav=({reset})=>{\r\n  return(\r\n    <div className=\"flex justify-end mr-8 mt-8\">\r\n    <button className=\" bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded \" onClick={reset}>\r\n  Reset\r\n</button>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n export default Nav;","import React, { Component } from 'react'\nimport ListAdd from \"./ListAdd/ListAdd\";\nimport Todo from \"./Todo/Todo\";\nimport Nav from \"./Nav/Nav\";\nimport \"./styles/main.css\";\n\nconst listnew=[];\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      list:listnew,\n      currentitem:{\n        key:\"\",\n        value:\"\"\n      }\n\n\n    }\n  }\n  resetList=()=>{\n    this.setState({\n      list:listnew\n    })\n  }\n  deleteitem=(key)=>{\n    const filtereItems= this.state.list.filter(it=>{\n     return it.key!==key;\n    });\n    this.setState({\n      list:filtereItems\n    })\n  }\n  updateList=(e,key)=>{\n    const items=this.state.list;\n    items.map(it=>{\n      if(it.key===key){\n        return it.value=e;\n      }\n    })\n    this.setState({\n      list:items\n    })\n  }\n\n  adList=(e)=>{\n    e.preventDefault();\n    const newItem = this.state.currentitem;\n    if(newItem.value !== \"\"){\n      const items =[...this.state.list,newItem];\n      this.setState({\n        list:items,\n        currentitem:{\n          key:\"\",\n          value:\"\"\n        }\n      })\n    }\n  }\n  onSearchChange = (event) => {\n\t\tthis.setState({currentitem:{\n      key:Date.now(),\n      value:event.target.value\n    }\n  })\n  \n    console.log(this.state.currentitem)\n\t}\n  render(){\n    return(\n      <div className=\"shadow-2xl\">\n        <Nav reset={this.resetList} />\n        <h1 className=\"text-6xl font-extrabold font-serif text-center mt-10\" >TodoList</h1>\n        <ListAdd searchChange={this.onSearchChange} addList={this.adList} />\n        <Todo itemLists={this.state.list} update={\n          this.updateList} deleteItem={this.deleteitem} value={this.state.currentitem.value}/>\n      </div>\n    );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}